// Salve este c√≥digo como: src/components/SpeedShowcase.jsx

import React, { useEffect, useRef } from 'react';
import { motion, useInView, useMotionValue, useTransform, animate } from 'framer-motion';
import { Cog, Zap, ChevronsRight } from 'lucide-react';

// --- Componente Principal ---
export function SpeedShowcase() {
    const ref = useRef(null);
    const isInView = useInView(ref, { once: true, margin: "-200px" });

    return (
        <div ref={ref} className="relative w-full min-h-[450px] bg-slate-50 p-6 sm:p-8 rounded-xl border border-slate-200 overflow-hidden">
            <AnimatedBackground isInView={isInView} />
            
            <div className="relative z-10 grid grid-cols-1 md:grid-cols-2 gap-8 h-full">
                <div className="flex flex-col justify-center items-center gap-6 md:order-1 order-2">
                    <AnimatedGears />
                    <div className="flex flex-col gap-3 w-full max-w-xs">
                        <TextBalloon isInView={isInView} delay={0.5}>Optimize & Compress Images</TextBalloon>
                        <TextBalloon isInView={isInView} delay={0.7}>Enable browser caching</TextBalloon>
                        <TextBalloon isInView={isInView} delay={0.9}>Reduce JavaScript file size</TextBalloon>
                    </div>
                </div>

                <div className="flex flex-col justify-center items-center gap-10 md:order-2 order-1">
                    <Velocimeter isInView={isInView} />
                    <LoadingBar isInView={isInView} />
                </div>
            </div>
        </div>
    );
}


// --- Sub-componentes ---

function Velocimeter({ isInView }) {
    const needleRotation = useMotionValue(-85);
    const finalPosition = 75;

    useEffect(() => {
        if (isInView) {
            animate(needleRotation, finalPosition, {
                type: 'spring',
                stiffness: 150,
                damping: 20,
                mass: 1.5,
                delay: 0.5,
            });
        }
    }, [isInView, needleRotation]);
    
    return (
        <div className="w-full max-w-[220px] flex flex-col items-center">
            <p className="text-sm font-semibold text-slate-600 mb-2">Speed Index</p>
            <motion.div 
                className="relative w-full aspect-square"
                onPan={(event, info) => {
                    const newRotation = needleRotation.get() + info.offset.x * 0.5;
                    needleRotation.set(Math.max(-85, Math.min(85, newRotation)));
                }}
                onPanEnd={() => {
                    animate(needleRotation, finalPosition, { type: 'spring', stiffness: 400, damping: 30 });
                }}
            >
                <svg viewBox="0 0 200 110" className="w-full h-auto">
                    <defs>
                        <linearGradient id="speedGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                            <stop offset="0%" stopColor="#ef4444" />
                            <stop offset="20%" stopColor="#f59e0b" />
                            <stop offset="50%" stopColor="#eab308" />
                            <stop offset="100%" stopColor="#22c55e" />
                        </linearGradient>
                    </defs>
                    <path
                        d="M 10 100 A 90 90 0 0 1 190 100"
                        stroke="url(#speedGradient)"
                        strokeWidth="20"
                        strokeLinecap="round"
                        fill="none"
                    />
                </svg>
                <motion.div
                    style={{ rotate: needleRotation }}
                    className="absolute bottom-[10px] left-1/2 w-1.5 h-[45%] origin-bottom"
                >
                    <div className="w-full h-full bg-slate-800 rounded-t-full" />
                </motion.div>
                <div className="absolute bottom-0 left-1/2 -translate-x-1/2 w-7 h-7 bg-white border-[5px] border-slate-800 rounded-full" />
                <div className="absolute inset-0 cursor-grab active:cursor-grabbing" />
            </motion.div>
        </div>
    );
}

function LoadingBar({ isInView }) {
    const fillWidth = useMotionValue(10);
    const finalWidth = 100;
    
    const barColor = useTransform(
        fillWidth,
        [10, 50, 100],
        ["#ef4444", "#f59e0b", "#22c55e"]
    );

    useEffect(() => {
        if (isInView) {
            animate(fillWidth, finalWidth, {
                type: 'spring',
                stiffness: 100,
                damping: 25,
                delay: 0.8
            });
        }
    }, [isInView, fillWidth]);

    return (
        <div className="w-full max-w-sm flex flex-col items-center">
             <p className="text-sm text-center text-slate-500 mb-2">Loading...</p>
            <div 
                className="w-full h-4 bg-slate-200 rounded-full relative cursor-grab active:cursor-grabbing"
                onPan={(event, info) => {
                    const barWidthPx = event.target.offsetWidth;
                    const newFill = fillWidth.get() + (info.offset.x / barWidthPx) * 100;
                    fillWidth.set(Math.max(0, Math.min(100, newFill)));
                }}
                onPanEnd={() => {
                     animate(fillWidth, finalWidth, { type: 'spring', stiffness: 400, damping: 30 });
                }}
            >
                <motion.div 
                    className="h-full rounded-full" 
                    style={{ 
                        width: useTransform(fillWidth, v => `${v}%`),
                        backgroundColor: barColor 
                    }} 
                />
            </div>
        </div>
    );
}

function AnimatedGears() {
    return (
        <div className="relative w-32 h-32 flex justify-center items-center scale-75 sm:scale-100">
             <motion.svg className="absolute w-full h-full text-orange-400" viewBox="0 0 100 100"
                initial={{ rotate: -90 }}
                animate={{ rotate: 270 }}
                transition={{ duration: 1.5, ease: "easeOut", delay: 0.5 }}
             >
                <path stroke="currentColor" strokeWidth="5" strokeLinecap="round" fill="none"
                    d="M 95 50 A 45 45 0 1 1 50 5"
                />
                <path d="M 50 5 L 40 15 L 50 25 L 60 15 Z" fill="currentColor" />
            </motion.svg>

            <motion.div 
                animate={{ rotate: 360 }}
                transition={{ duration: 10, repeat: Infinity, ease: 'linear'}}
            >
                <Cog className="text-orange-400 w-24 h-24" strokeWidth={1}/>
            </motion.div>
            <motion.div 
                className="absolute"
                animate={{ rotate: -360 }}
                transition={{ duration: 7, repeat: Infinity, ease: 'linear'}}
            >
                <Cog className="text-orange-500 opacity-80 w-16 h-16" strokeWidth={1}/>
            </motion.div>
             <motion.div 
                className="absolute"
                animate={{ rotate: 360 }}
                transition={{ duration: 5, repeat: Infinity, ease: 'linear'}}
            >
                <Cog className="text-orange-400 w-10 h-10" strokeWidth={1}/>
            </motion.div>
        </div>
    );
}

function TextBalloon({ children, isInView, delay }) {
    const variants = {
        hidden: { opacity: 0, y: 20 },
        visible: { 
            opacity: 1, 
            y: 0,
            transition: { duration: 0.5, ease: 'easeOut', delay }
        }
    };
    return (
        <motion.div 
            variants={variants}
            initial="hidden"
            animate={isInView ? "visible" : "hidden"}
            className="flex items-center gap-2 bg-blue-500 text-white p-2.5 rounded-lg shadow-md"
        >
            <span className="text-sm font-semibold">{children}</span>
        </motion.div>
    );
}

function AnimatedBackground({ isInView }) {
    const variants = {
        hidden: { opacity: 0 },
        visible: { opacity: 0.6, transition: { duration: 1, delay: 0.5 } }
    };

    return (
        <motion.div 
            variants={variants}
            initial="hidden"
            animate={isInView ? "visible" : "hidden"}
            className="absolute inset-0 z-0"
            aria-hidden="true"
        >
            <motion.svg width="100%" height="100%"
                animate={{ x: [-10, 10, -10] }}
                transition={{ duration: 20, repeat: Infinity, ease: 'linear', repeatType: 'mirror' }}
            >
                 <defs>
                    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                        <circle cx="1" cy="1" r="1" fill="#e2e8f0" />
                    </pattern>
                </defs>
                <rect width="100%" height="100%" fill="url(#grid)" />
            </motion.svg>
        </motion.div>
    );
}